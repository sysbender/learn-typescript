besides generating bundles for single
page applications V also allows us to
generate multiple bundles for several
pages one bundle per page and in this
lesson we're going to talk about how to
actually generate several bundles for
individual pages and to demonstrate this
let's just do a little preparation so
for example in our main index.html file
I'm going to add a heading called index
and also I'm going to add here a link
which is going to redirect it to a
second page called login and now I'm
going to copy over all the content of
this file and create our new page so in
the root of our project we're going to
create a new folder called login and in
here I'm going to add another Javascript
file which will be a script for our new
page and I'm also going to add HTML file
for the login page so here I'm going to
paste everything from the
index.html and a few values to
differentiate this page let's just
change the title text here on login as
well as the H1 Tech and the link on this
page will point to our main page index
and of course let's also properly
include Javascript file to this page by
specifying the proper PA to login.
jscript which is contained inside the
login folder and then let's also edit
the title on the index. HTML page and
now let's run our development server by
running npm randev and check the result
in the browser so here we can see our
main page
index.html since we have referenced the
root pass and if I'm going to click on
this link we're supposed to be
redirected on the second page which is
login and this is exactly what is
happening So currently our project
contains two separate pages that are
completely independent of each other and
between navigating these two pages
browser actually makes full page
refreshes so now let's see what is going
to happen when we build this project for
production let's switch over back to the
terminal and run the commment npm Run
build and here as we can see VD has
generated only one page
index.html but we also expected another
page login to be generated as well so
let's check the result in a browser and
then we figure out why it didn't
generate login page so here I opened the
build application and if I'm going to
try and go to login page as you can see
the page didn't change even though the
address in the URL bar was updated and
this makes sense because VD has
generated only one index.html page when
building project for production and when
we are trying to navigate to the page
which doesn't exist we are redirected to
the main page and the reason why V
didn't generate the login page is
because we are missing some
configurations to tell it that we
actually have more than one page in our
application so to notify it about
several pages in our application that it
needs to generate Pages for we need to
add some configurations inside VD
configuration file so in here let's add
an object built within which there will
be another object rollup options which
will contain in turn another object
called input and finally in this object
we're going to list all the available
pages in our application and currently
we have only two pages so let's specify
these pages in here we'll call these
Pages Main and login and now as well as
for the keys we have to specify the full
pass to HTML files or these Pages let's
use function resolve to generate
absolute pass to our template
index.html and the same function we're
going to use to generate passs for the
login page but here let's also specify
proper pass since login page is
contained inside of login folder we have
to mention this folder in the pass like
so and before building our project again
let's add an import statement for the
resolve function from the standard
nodejs module pass and now switch over
to the terminal and run npm run build
again and let's see what pages have been
generated in this case and this time as
we can see besides our main page we also
see that the Lin page was also generated
and if we take a look at the generated
folder with our project disc in here we
can see an HTML file which corresponds
to the login page so now if we're going
to preview this project in a browser and
try to navigate to the login page in
this case indeed we were navigated to
the login page but please also note that
there is no JavaScript bundle fetched
for these Pages even though we have
those JavaScript files imported in these
templates and actually when we run npm
run build the JavaScript bundles are not
generated one more time just to make
sure that we are including proper
scripts on HTML Pages our main page as
well as login page so the reason why
there were no bundles generated for
these JavaScript files is because
currently these two files are empty and
just to make build generate Jo bundles
as well let's just add arbitrary
statement in here for example let's
console log something in the main.js as
well as in
login.js and now let's regenerate build
project again and this time in the list
of all generated files we also see a
couple of JavaScript files one
Javascript file for each HTML page and
now we can use all capabilities of it
inside these JavaScript files to
continue our development and generate
proper JavaScript bundles for every HTML
page so let's try it out for example
let's assume that we have to import some
CSS file well not actually CSS but let's
use SAS as an example and I'm going to
create this login dosas file and put
here some arbitrary Styles just to make
sure that while importing This Ss file
these Styles will be properly applied to
the page so I'm going to make background
color of the body Brown the text color
will be white and Link text will be
white as
well and the same sus file I'm also
going to create for our main page let's
call it main. sus paste the same Styles
but to differentiate these two pages
let's change background color on Indigo
so now let's not forget and also include
this main dos file inside our main
script like so and now before generating
the build we actually have to do one
more thing in order for V to compile our
sus files we also have to install SAS
preprocessor itself so we are doing this
by using npm let's install SAS compiler
and now if we're going to start our
development server by using npm rundo
and take a look at the browser we're
going to see that those Styles have been
properly applied to the page which means
SAS was compiled success sucessfully and
if we'll switch over to the main page we
can see that background color changes
because we have two different
stylesheets for these Pages index and
login and now let's see how everything
looks when we build the project for
production by running npm run build and
then again I'm going to run npm run
preview to open up build project in the
browser and here we also can see that
styles were applied by the way there is
only CSS file fetched as we can see in
the network tab and there is no
JavaScript bundle for this page and
again just because our Javascript file
contains only SAS import it didn't
actually generate JavaScript bundle at
all so just to make sure that it's going
to generate those two bundles let's add
arbitrary JavaScript code in each of
these files I'm going to add basic
consol lock statement here as well as
inside
login.js and once again we're going to
rebuild the project and run the preview
server and switch over to the browser
and this time in the network tab we can
see that besides fetching CSS file there
is also a request for fetching
JavaScript bundle as well so everything
is properly working and this is how we
can generate several JavaScript bundles
for multiple pages in case we're
building multipage app and the most
important thing when it comes to
generating several bundles for different
pages is to actually specify proper
config inside of VD configuration file
and particularly what we have to do here
is to actually provide a mapin between
all our pages and absolute pass for
template files of those pages and then
when building project for production VD
is going to make sure to generate
separate JavaScript bundles for every
HTML
page vit also has mode which allows us