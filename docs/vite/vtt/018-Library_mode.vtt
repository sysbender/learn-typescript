WEBVTT

00:00:02.880 --> 00:00:08.159
to create libraries and in this lesson

00:00:05.320 --> 00:00:11.360
let's see what tools V provides us with

00:00:08.159 --> 00:00:13.599
to create npm packages so for that we

00:00:11.360 --> 00:00:17.119
need to do a little preparation first

00:00:13.599 --> 00:00:19.520
let's create an empty folder 18 and then

00:00:17.119 --> 00:00:22.719
switch over to this folder in our

00:00:19.520 --> 00:00:26.639
terminal and here I'm going to create

00:00:22.719 --> 00:00:29.080
two vid projects first one will be our

00:00:26.639 --> 00:00:31.760
client application which is going to

00:00:29.080 --> 00:00:34.560
import the custom package we're going to

00:00:31.760 --> 00:00:36.880
create and the second project will be

00:00:34.560 --> 00:00:38.480
the library itself self so let's start

00:00:36.880 --> 00:00:41.400
with creating the first client

00:00:38.480 --> 00:00:45.119
application let's run npm create V

00:00:41.400 --> 00:00:47.719
latest to scaffold default V project I'm

00:00:45.119 --> 00:00:50.000
going to call this project simply up we

00:00:47.719 --> 00:00:53.280
are not going to use any Frameworks so

00:00:50.000 --> 00:00:56.520
I'll go with an option vanilla JS and

00:00:53.280 --> 00:00:59.080
also we will not use typescript and now

00:00:56.520 --> 00:01:01.360
right next to the app folder let's

00:00:59.080 --> 00:01:05.159
create another vid project which is

00:01:01.360 --> 00:01:09.159
going to contain the library so let's

00:01:05.159 --> 00:01:11.760
run the same comment npm create V latest

00:01:09.159 --> 00:01:14.159
I'll call this project leap and

00:01:11.760 --> 00:01:17.719
basically make the same choices we'll

00:01:14.159 --> 00:01:20.320
use vanilla J without using typescript

00:01:17.719 --> 00:01:23.199
so now let's just open up folders with

00:01:20.320 --> 00:01:26.560
these projects in a separate terminal

00:01:23.199 --> 00:01:29.599
TPS and then we can start working on our

00:01:26.560 --> 00:01:33.440
npm package so let's open up main

00:01:29.599 --> 00:01:36.000
Javascript file of our library from here

00:01:33.440 --> 00:01:38.480
we're going to remove everything

00:01:36.000 --> 00:01:41.639
and install all npm dependencies by

00:01:38.480 --> 00:01:44.119
running npm install next just to make

00:01:41.639 --> 00:01:46.800
sure that our application can be open in

00:01:44.119 --> 00:01:49.800
a browser let's run development server

00:01:46.800 --> 00:01:52.239
by running npm randev switch over to the

00:01:49.800 --> 00:01:55.119
browser and make sure application is

00:01:52.239 --> 00:01:57.880
loaded everything looks good so let's

00:01:55.119 --> 00:01:59.920
start creating Javascript file which

00:01:57.880 --> 00:02:02.639
will contain functionality of our

00:01:59.920 --> 00:02:05.599
package I'm going to place this file

00:02:02.639 --> 00:02:07.199
inside the source folder and the file

00:02:05.599 --> 00:02:09.679
will be called

00:02:07.199 --> 00:02:12.320
index.js so the package we're about to

00:02:09.679 --> 00:02:14.880
create will contain only one utility

00:02:12.320 --> 00:02:17.880
function called plug which is going to

00:02:14.880 --> 00:02:21.119
accept array of objects as the first

00:02:17.880 --> 00:02:24.000
parameter and the name of the key which

00:02:21.119 --> 00:02:27.080
will have to extract from every object

00:02:24.000 --> 00:02:29.719
from the array is the second parameter

00:02:27.080 --> 00:02:33.320
and in here we're going to Loop over

00:02:29.719 --> 00:02:36.320
every object in this collection and

00:02:33.320 --> 00:02:39.119
extract key pest as a second parameter

00:02:36.320 --> 00:02:42.840
fi and eventually this function is going

00:02:39.119 --> 00:02:45.679
to give us an array which contains only

00:02:42.840 --> 00:02:47.920
values of the specified key and just to

00:02:45.679 --> 00:02:51.000
test out this functionality we're going

00:02:47.920 --> 00:02:54.080
to create an array of objects for

00:02:51.000 --> 00:02:56.840
example let's create array of users

00:02:54.080 --> 00:03:00.719
where every object will contain two keys

00:02:56.840 --> 00:03:03.360
name of the user and H I'm going to add

00:03:00.719 --> 00:03:08.800
three objects in this array and then

00:03:03.360 --> 00:03:08.800
populate each field with random

00:03:09.400 --> 00:03:14.480
data let's do the same for the h

00:03:11.960 --> 00:03:17.520
property and down here I'm going to

00:03:14.480 --> 00:03:19.639
Brint the result of our function plug

00:03:17.520 --> 00:03:23.040
we'll call this function with our array

00:03:19.639 --> 00:03:25.719
of users and the property we need to

00:03:23.040 --> 00:03:27.800
extract will be name and now in a

00:03:25.719 --> 00:03:30.080
console we're supposed to receive an

00:03:27.800 --> 00:03:33.400
array which will consist only of the

00:03:30.080 --> 00:03:36.239
user names and of course to execute this

00:03:33.400 --> 00:03:37.719
script in the browser let's reference it

00:03:36.239 --> 00:03:40.320
from

00:03:37.719 --> 00:03:43.280
index.html and as expected we can see an

00:03:40.320 --> 00:03:45.760
array of usernames but of course since

00:03:43.280 --> 00:03:48.159
this project is intended to be an npm

00:03:45.760 --> 00:03:50.920
package we need to build this project as

00:03:48.159 --> 00:03:53.679
npm library and we need to tell it that

00:03:50.920 --> 00:03:56.920
our project is actually the package that

00:03:53.679 --> 00:04:00.520
other users can install so let's create

00:03:56.920 --> 00:04:04.840
configuration file with config JS an

00:04:00.520 --> 00:04:07.760
expert configuration object so let's add

00:04:04.840 --> 00:04:10.639
object object built within which there

00:04:07.760 --> 00:04:12.800
will be another object liap and by

00:04:10.639 --> 00:04:15.159
specifying this lip object we are

00:04:12.800 --> 00:04:17.480
informing with that our project is

00:04:15.159 --> 00:04:20.280
actually the package and with has to

00:04:17.480 --> 00:04:23.159
build this project differently so the

00:04:20.280 --> 00:04:25.679
first option in this object is entry

00:04:23.159 --> 00:04:28.400
which will basically point to the

00:04:25.679 --> 00:04:30.920
Javascript file of our package let's use

00:04:28.400 --> 00:04:33.840
function resolve to resolve the absolute

00:04:30.920 --> 00:04:36.440
pass to JavaScript file

00:04:33.840 --> 00:04:39.400
index.js and then let's assign name to

00:04:36.440 --> 00:04:41.639
our package I'm going to call it plug

00:04:39.400 --> 00:04:44.440
and also let's specify another option

00:04:41.639 --> 00:04:47.159
file name and this option will tell it

00:04:44.440 --> 00:04:50.199
which file name it should assign to the

00:04:47.159 --> 00:04:52.199
final bundle script of our library as

00:04:50.199 --> 00:04:54.080
always let's go ahead and write down an

00:04:52.199 --> 00:04:56.360
import statement for the function

00:04:54.080 --> 00:04:59.239
resolve that should be imported from the

00:04:56.360 --> 00:05:02.440
standard node.js module pass and then

00:04:59.239 --> 00:05:05.639
all that code that was used to test our

00:05:02.440 --> 00:05:07.920
function we are going to comment out

00:05:05.639 --> 00:05:10.080
because this is not Cent application so

00:05:07.920 --> 00:05:12.199
we're not going to use our function plug

00:05:10.080 --> 00:05:14.599
in this project but instead it is

00:05:12.199 --> 00:05:17.159
intended to be used by other users by

00:05:14.599 --> 00:05:19.360
installing our package into their

00:05:17.159 --> 00:05:22.400
applications and now it's finally time

00:05:19.360 --> 00:05:26.000
to build our package so in the terminal

00:05:22.400 --> 00:05:28.840
let's execute npm run build and looks

00:05:26.000 --> 00:05:31.800
like I have specified wrong pass to the

00:05:28.840 --> 00:05:35.599
index file let's quickly get back to V.C

00:05:31.800 --> 00:05:38.280
config.js and fix this pass the folder

00:05:35.599 --> 00:05:39.920
name should be source so right now after

00:05:38.280 --> 00:05:43.159
I'm going to build this project by

00:05:39.920 --> 00:05:45.960
running npm run build we can see that VD

00:05:43.159 --> 00:05:48.280
has generated two assets those are built

00:05:45.960 --> 00:05:50.760
files of our package and the reason why

00:05:48.280 --> 00:05:53.440
there are two files is because VD has

00:05:50.760 --> 00:05:55.520
generated two versions of our package

00:05:53.440 --> 00:05:58.760
the first version will be used when

00:05:55.520 --> 00:06:01.079
users will import our package by using

00:05:58.760 --> 00:06:03.400
EAS create modules and the second

00:06:01.079 --> 00:06:05.800
version will be imported if users will

00:06:03.400 --> 00:06:08.520
use function required

00:06:05.800 --> 00:06:10.280
while importing our package so now let's

00:06:08.520 --> 00:06:13.639
take a look at the content of these

00:06:10.280 --> 00:06:16.079
files firstly let's open up L.G which is

00:06:13.639 --> 00:06:18.199
inside of this folder here we can only

00:06:16.079 --> 00:06:21.159
see the code of our custom function

00:06:18.199 --> 00:06:24.320
which was minified a little bit and then

00:06:21.159 --> 00:06:26.520
this function was exported by using LS

00:06:24.320 --> 00:06:28.760
plaque and this file is what's going to

00:06:26.520 --> 00:06:31.719
be imported when users are going to

00:06:28.760 --> 00:06:34.520
import our library by using native

00:06:31.719 --> 00:06:38.480
ecmascript module syntax and now let's

00:06:34.520 --> 00:06:40.320
open up another file plug UMD CJs so as

00:06:38.480 --> 00:06:43.000
was said before this version of the

00:06:40.320 --> 00:06:45.960
library is going to be imported when

00:06:43.000 --> 00:06:48.840
users are going to use function require

00:06:45.960 --> 00:06:51.520
to import our library but this is not

00:06:48.840 --> 00:06:53.840
all and in order to make our package so

00:06:51.520 --> 00:06:56.920
that it can be imported we still have to

00:06:53.840 --> 00:06:58.719
do some tweaks inside package.json so

00:06:56.920 --> 00:07:01.880
here I'm going to assign different name

00:06:58.719 --> 00:07:03.760
to our library let's call it plaque then

00:07:01.880 --> 00:07:05.960
we're going to have to specify a couple

00:07:03.760 --> 00:07:09.199
more keys in this object and

00:07:05.960 --> 00:07:11.719
specifically those keys are Main and

00:07:09.199 --> 00:07:14.800
module and by using these keys we're

00:07:11.719 --> 00:07:17.000
specifying pass to the build files so

00:07:14.800 --> 00:07:20.119
when users are going to import our

00:07:17.000 --> 00:07:22.159
library by using require the file that

00:07:20.119 --> 00:07:25.400
should be imported in this case we're

00:07:22.159 --> 00:07:28.199
specifying under the key Main and in

00:07:25.400 --> 00:07:31.360
case of the Native ecmascript modules

00:07:28.199 --> 00:07:33.520
we're going to import file plug. JS and

00:07:31.360 --> 00:07:36.199
now I'm going to have to specify another

00:07:33.520 --> 00:07:38.840
object experts with almost the same

00:07:36.199 --> 00:07:41.159
content since our library is exposing

00:07:38.840 --> 00:07:44.000
Only One Import meaning that it has only

00:07:41.159 --> 00:07:46.920
one entry point let's specify this entry

00:07:44.000 --> 00:07:50.199
point and here we have to use a couple

00:07:46.920 --> 00:07:52.960
more keys import and require and these

00:07:50.199 --> 00:07:55.480
keys will also contain P to the files

00:07:52.960 --> 00:07:58.520
that have to be imported in case we're

00:07:55.480 --> 00:08:01.880
using ecmascript modules or function

00:07:58.520 --> 00:08:04.560
require to import our library so now

00:08:01.880 --> 00:08:07.360
everyon is ready to actually start using

00:08:04.560 --> 00:08:09.880
our library in our client application

00:08:07.360 --> 00:08:13.239
let's go to our client application and

00:08:09.880 --> 00:08:16.239
open up main Javascript file let's clear

00:08:13.239 --> 00:08:19.760
this file and then we have to somehow

00:08:16.239 --> 00:08:22.360
import our library into this application

00:08:19.760 --> 00:08:25.119
without actually publishing our package

00:08:22.360 --> 00:08:27.480
in the npm registry we are actually also

00:08:25.119 --> 00:08:29.560
going to see an example where we will

00:08:27.480 --> 00:08:32.079
publish the package but it will come in

00:08:29.560 --> 00:08:34.360
one of the next lessons and for now I'm

00:08:32.079 --> 00:08:35.400
going to make our library globally

00:08:34.360 --> 00:08:38.040
available

00:08:35.400 --> 00:08:40.520
in the operating system and npm allows

00:08:38.040 --> 00:08:42.560
us to do that by executing the following

00:08:40.520 --> 00:08:45.119
commment inside of that library that we

00:08:42.560 --> 00:08:48.560
have to make globally available and this

00:08:45.119 --> 00:08:51.920
command is npm link so I'm going to

00:08:48.560 --> 00:08:54.920
execute this command in the route of our

00:08:51.920 --> 00:08:57.280
library project and then later I will be

00:08:54.920 --> 00:08:59.400
able to link to this library from our

00:08:57.280 --> 00:09:01.880
client application but for now let's

00:08:59.400 --> 00:09:04.159
switch over to the route of our client

00:09:01.880 --> 00:09:05.639
application and install all npm

00:09:04.159 --> 00:09:07.480
dependency

00:09:05.639 --> 00:09:10.119
so now I need to get the code of our

00:09:07.480 --> 00:09:12.520
library in the node modules folder of

00:09:10.119 --> 00:09:14.719
our client application and since we have

00:09:12.520 --> 00:09:17.520
previously made our library globally

00:09:14.719 --> 00:09:20.360
available in the operating system we can

00:09:17.520 --> 00:09:23.679
simply link to that Library by running

00:09:20.360 --> 00:09:26.440
npm link and the library name in the

00:09:23.679 --> 00:09:28.520
root of our client application and right

00:09:26.440 --> 00:09:31.119
away we can see that this comment has

00:09:28.520 --> 00:09:34.960
created the link with the same name as

00:09:31.119 --> 00:09:37.920
our library and this link points to the

00:09:34.960 --> 00:09:40.159
source code of our library and finally

00:09:37.920 --> 00:09:43.320
it is time to test the functionality of

00:09:40.159 --> 00:09:45.760
our package in this application so I'm

00:09:43.320 --> 00:09:47.840
going to start development server and

00:09:45.760 --> 00:09:50.400
now it's finally time to test the

00:09:47.840 --> 00:09:53.119
functionality of our package from our

00:09:50.400 --> 00:09:55.199
client application and to do that let's

00:09:53.119 --> 00:09:57.880
just copy over that commented code we

00:09:55.199 --> 00:10:01.079
have previously put in the Javascript

00:09:57.880 --> 00:10:04.320
file of our package cut it from here and

00:10:01.079 --> 00:10:06.520
move it inside main.js of our client

00:10:04.320 --> 00:10:08.440
application ation but of course here

00:10:06.520 --> 00:10:10.880
this function plug should be imported

00:10:08.440 --> 00:10:13.239
from our custom package so let's write

00:10:10.880 --> 00:10:16.040
down an import statement for this

00:10:13.239 --> 00:10:19.040
function and import this function using

00:10:16.040 --> 00:10:22.119
our package name plug the same name

00:10:19.040 --> 00:10:24.320
which is used inside node modules folder

00:10:22.119 --> 00:10:26.400
and by actually importing our library in

00:10:24.320 --> 00:10:29.040
this way it will actually go ahead and

00:10:26.400 --> 00:10:31.719
import the function from this file plug.

00:10:29.040 --> 00:10:34.960
GS because we have previously specified

00:10:31.719 --> 00:10:38.440
pass to this file inside the package

00:10:34.960 --> 00:10:40.760
Json of our package source code and now

00:10:38.440 --> 00:10:43.960
let's just add some random content

00:10:40.760 --> 00:10:46.880
inside the index.html of our client

00:10:43.960 --> 00:10:49.360
application I'm going to show a heading

00:10:46.880 --> 00:10:52.199
here and here we go we got expected

00:10:49.360 --> 00:10:54.560
result in our console so our function

00:10:52.199 --> 00:10:57.599
plug which was imported from our custom

00:10:54.560 --> 00:11:00.119
package has extracted usernames from the

00:10:57.599 --> 00:11:02.320
array of user objects so at the end

00:11:00.119 --> 00:11:04.960
let's just recall what we have done in

00:11:02.320 --> 00:11:07.000
order to implement this Library in our

00:11:04.960 --> 00:11:08.520
library project we have created file

00:11:07.000 --> 00:11:11.280
with the name

00:11:08.520 --> 00:11:13.960
index.js where we have implemented our

00:11:11.280 --> 00:11:16.480
function plug and then by specifying

00:11:13.960 --> 00:11:18.920
object under the key lip inside vid

00:11:16.480 --> 00:11:21.440
configuration we have told VD that this

00:11:18.920 --> 00:11:24.079
project should be built as an npm

00:11:21.440 --> 00:11:26.079
package instead of a client application

00:11:24.079 --> 00:11:28.599
and here under the entry key we have

00:11:26.079 --> 00:11:31.040
pointed to the file which contains the

00:11:28.599 --> 00:11:33.280
source code of our library and we will

00:11:31.040 --> 00:11:35.679
also use the couple more keys to assign

00:11:33.280 --> 00:11:38.079
name to this Library as well as the file

00:11:35.679 --> 00:11:40.360
name that should be used for bundle

00:11:38.079 --> 00:11:42.560
JavaScript file after the build then

00:11:40.360 --> 00:11:45.280
inside package Json file we have added

00:11:42.560 --> 00:11:47.400
some extra configurations to specify

00:11:45.280 --> 00:11:50.520
which files should be imported in case

00:11:47.400 --> 00:11:54.560
our users are going to import our

00:11:50.520 --> 00:11:57.679
library by using standard easp modules

00:11:54.560 --> 00:12:00.159
or by using function require and then

00:11:57.679 --> 00:12:02.280
just to be able to use this library

00:12:00.159 --> 00:12:04.679
inside a client application without

00:12:02.280 --> 00:12:07.280
actually publishing this library to the

00:12:04.679 --> 00:12:10.679
npm registry we have made this Library

00:12:07.280 --> 00:12:13.119
globally available by running npm Link

00:12:10.679 --> 00:12:14.800
in the rout of this project and then

00:12:13.119 --> 00:12:18.040
inside the road of our client

00:12:14.800 --> 00:12:21.000
application we ran npm link and the

00:12:18.040 --> 00:12:23.400
library name then we head to add to node

00:12:21.000 --> 00:12:26.000
modules folder and this command has

00:12:23.400 --> 00:12:28.880
created the special link inside node

00:12:26.000 --> 00:12:31.560
modules folder of the client application

00:12:28.880 --> 00:12:33.880
with the same name as our package name

00:12:31.560 --> 00:12:36.199
plug and this link points directly to

00:12:33.880 --> 00:12:38.000
the source code of our package which

00:12:36.199 --> 00:12:41.119
eventually allowed us to import this

00:12:38.000 --> 00:12:43.440
library from our applications JavaScript

00:12:41.119 --> 00:12:46.000
code and these are the basics of

00:12:43.440 --> 00:12:48.520
developing JavaScript packages by using

00:12:46.000 --> 00:12:51.840
V in the upcoming lessons we're going to

00:12:48.520 --> 00:12:53.599
learn about this whole process even more

