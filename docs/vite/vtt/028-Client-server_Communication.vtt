WEBVTT

00:00:00.359 --> 00:00:04.960
now let's see how V allows us to

00:00:02.319 --> 00:00:06.560
establish client server communication

00:00:04.960 --> 00:00:09.200
just like in the previous lesson when we

00:00:06.560 --> 00:00:11.359
were using hook handle hot update to

00:00:09.200 --> 00:00:14.040
implement hot module replacement feature

00:00:11.359 --> 00:00:17.200
for our plugin and in here we were using

00:00:14.040 --> 00:00:19.600
webset up object to send events to the

00:00:17.200 --> 00:00:22.000
client and then we also had a chance to

00:00:19.600 --> 00:00:24.640
specify which data exactly should be

00:00:22.000 --> 00:00:26.479
sent along with this event and in our

00:00:24.640 --> 00:00:29.200
client script we have registered

00:00:26.479 --> 00:00:31.520
listener for this event accepted the

00:00:29.200 --> 00:00:33.880
data received from the server and then

00:00:31.520 --> 00:00:36.359
we were able to do anything we want with

00:00:33.880 --> 00:00:38.800
this data to implement hot module

00:00:36.359 --> 00:00:41.000
replacement but besides using this hook

00:00:38.800 --> 00:00:43.399
handle hot update which will be called

00:00:41.000 --> 00:00:45.479
only when any module that we are

00:00:43.399 --> 00:00:47.520
importing in JavaScript files will be

00:00:45.479 --> 00:00:49.600
changed we can use another hook which

00:00:47.520 --> 00:00:52.200
allows us to configure the server and

00:00:49.600 --> 00:00:54.760
this Hook is called configure server

00:00:52.200 --> 00:00:57.479
which accepts a server instance as the

00:00:54.760 --> 00:00:59.760
first parameter and by using this server

00:00:57.479 --> 00:01:02.640
object we can also access websocket

00:00:59.760 --> 00:01:04.760
connection so just like previously we

00:01:02.640 --> 00:01:07.120
can set up a listener for all kinds of

00:01:04.760 --> 00:01:09.279
events for example there is a default

00:01:07.120 --> 00:01:11.720
event called connection which will be

00:01:09.279 --> 00:01:13.920
fired whenever our webset connection

00:01:11.720 --> 00:01:17.160
will be established so we can try

00:01:13.920 --> 00:01:19.600
listening for this in here and once we

00:01:17.160 --> 00:01:22.279
establish web sucket connection let's

00:01:19.600 --> 00:01:24.880
send any1 to the client with the name

00:01:22.279 --> 00:01:27.319
connected and as a payload we can send

00:01:24.880 --> 00:01:29.960
simple message connection

00:01:27.319 --> 00:01:32.640
established and now to be able to listen

00:01:29.960 --> 00:01:35.880
for this event from the client code we

00:01:32.640 --> 00:01:39.439
have to register a listener by using

00:01:35.880 --> 00:01:42.640
object hot so here we also call a method

00:01:39.439 --> 00:01:45.040
called on and as a first parameter we

00:01:42.640 --> 00:01:47.520
have to specify event name with which

00:01:45.040 --> 00:01:50.520
will be listen in for and as the second

00:01:47.520 --> 00:01:53.359
parameter we specify the closure which

00:01:50.520 --> 00:01:55.600
will be our event handler so this

00:01:53.359 --> 00:01:57.399
closure is going to receive the payload

00:01:55.600 --> 00:02:00.000
sent from the server along with this

00:01:57.399 --> 00:02:02.920
event and now let's see what will be

00:02:00.000 --> 00:02:05.760
printed in a console I'm going to switch

00:02:02.920 --> 00:02:08.200
over to the browser and as we can see in

00:02:05.760 --> 00:02:10.520
here we have that message sent from the

00:02:08.200 --> 00:02:13.120
server once webset connection was

00:02:10.520 --> 00:02:15.760
established in this way we can exchange

00:02:13.120 --> 00:02:18.800
messages between server and the C L for

00:02:15.760 --> 00:02:22.160
example let's fire another event as a

00:02:18.800 --> 00:02:23.960
response to the server with a name pin

00:02:22.160 --> 00:02:26.960
and the payload which will also be a

00:02:23.960 --> 00:02:29.160
simple message hello server and now

00:02:26.960 --> 00:02:31.600
going back to our plugin implementation

00:02:29.160 --> 00:02:34.359
inside of this configure server hook

00:02:31.600 --> 00:02:38.359
let's register another listener for the

00:02:34.359 --> 00:02:40.479
pin event and specify an event handler

00:02:38.359 --> 00:02:42.680
this time event handler is going to

00:02:40.479 --> 00:02:45.640
receive two parameters first of which

00:02:42.680 --> 00:02:47.279
will be the payload sent from the client

00:02:45.640 --> 00:02:50.120
and the second parameter will be the

00:02:47.279 --> 00:02:52.200
client itself in other words the object

00:02:50.120 --> 00:02:53.840
that represents the connection and

00:02:52.200 --> 00:02:56.319
inside of this closure we will be able

00:02:53.840 --> 00:02:59.319
to use this object to send events to the

00:02:56.319 --> 00:03:02.399
client so as a response let's send event

00:02:59.319 --> 00:03:04.520
with a name pun and the message hello

00:03:02.399 --> 00:03:06.640
client and now one more time let's

00:03:04.520 --> 00:03:09.040
switch over to our client script and

00:03:06.640 --> 00:03:12.279
register a listener for this por by

00:03:09.040 --> 00:03:14.479
using that same object hot as an event

00:03:12.279 --> 00:03:16.720
handler let's specify the closure which

00:03:14.479 --> 00:03:20.000
will receive the payload as the first

00:03:16.720 --> 00:03:22.520
argument and print this payload in a

00:03:20.000 --> 00:03:25.000
console so now in the browser console we

00:03:22.520 --> 00:03:27.319
can see two messages the first one was

00:03:25.000 --> 00:03:29.520
printed once websocket connection was

00:03:27.319 --> 00:03:31.800
established because previously on the

00:03:29.520 --> 00:03:34.120
server site in our plugin implementation

00:03:31.800 --> 00:03:36.359
code we have registered listener for the

00:03:34.120 --> 00:03:39.120
connection event and as soon as webset

00:03:36.359 --> 00:03:41.479
connection was established we send the

00:03:39.120 --> 00:03:43.640
event called connected to the server

00:03:41.479 --> 00:03:46.560
with the message connection established

00:03:43.640 --> 00:03:49.319
and then client has received this event

00:03:46.560 --> 00:03:51.120
and printed that message in a console

00:03:49.319 --> 00:03:53.640
and now to reply back to the server

00:03:51.120 --> 00:03:56.080
client send another one with a name pin

00:03:53.640 --> 00:03:57.840
and the message hello server on the

00:03:56.080 --> 00:04:01.560
server side we have registered a

00:03:57.840 --> 00:04:03.880
listener for D pin and also printed the

00:04:01.560 --> 00:04:06.560
message which will come from the client

00:04:03.880 --> 00:04:08.160
in the server console so now if we're

00:04:06.560 --> 00:04:10.760
going to take a look on the server

00:04:08.160 --> 00:04:13.080
console we're going to see here that

00:04:10.760 --> 00:04:15.760
message received from the client hello

00:04:13.080 --> 00:04:18.239
server and finally besides printing this

00:04:15.760 --> 00:04:21.479
message in a console we're also firing

00:04:18.239 --> 00:04:24.800
another E pun to the client with the

00:04:21.479 --> 00:04:27.040
message hello client and in our client

00:04:24.800 --> 00:04:30.120
script we are basically listening for

00:04:27.040 --> 00:04:32.680
this event and printing received message

00:04:30.120 --> 00:04:35.640
in the browser console and which is why

00:04:32.680 --> 00:04:38.200
we're seeing in here a second look that

00:04:35.640 --> 00:04:40.479
says hello client received from the

00:04:38.200 --> 00:04:43.040
server and by the way all those

00:04:40.479 --> 00:04:46.000
listeners and EVS which we have used in

00:04:43.040 --> 00:04:48.720
here this code will be executed only if

00:04:46.000 --> 00:04:50.880
an object hot will be available because

00:04:48.720 --> 00:04:53.080
we have wrapped everything in the if

00:04:50.880 --> 00:04:55.359
conditional and the thing is that this

00:04:53.080 --> 00:04:57.800
object hot will be available only during

00:04:55.359 --> 00:05:00.239
development so if we're going to build

00:04:57.800 --> 00:05:03.439
this project for production by running

00:05:00.239 --> 00:05:05.920
npm run build this object hold will not

00:05:03.439 --> 00:05:07.640
be available so all this code will be

00:05:05.920 --> 00:05:10.680
basically removed from the production

00:05:07.640 --> 00:05:12.200
bundle by using Tre shaking so at the

00:05:10.680 --> 00:05:15.160
end let's just make sure that this is

00:05:12.200 --> 00:05:17.319
the case I'm going to print out simple

00:05:15.160 --> 00:05:19.479
message in here just to see that this

00:05:17.319 --> 00:05:21.520
code will be executed and indeed we're

00:05:19.479 --> 00:05:24.000
seeing that lock Hut in the browser

00:05:21.520 --> 00:05:26.160
console along with other locks because

00:05:24.000 --> 00:05:27.880
currently I'm running development server

00:05:26.160 --> 00:05:30.279
but once I'm going to switch over to the

00:05:27.880 --> 00:05:32.840
console and run the common to build this

00:05:30.279 --> 00:05:35.000
project for production and then run

00:05:32.840 --> 00:05:38.040
production built in the browser by

00:05:35.000 --> 00:05:40.760
executing npm run preview sure enough

00:05:38.040 --> 00:05:43.080
I'm not going to see any logs whatsoever

00:05:40.760 --> 00:05:45.439
this is because that conditional block

00:05:43.080 --> 00:05:48.520
which we're checking if object is

00:05:45.439 --> 00:05:50.640
present has not been executed since hot

00:05:48.520 --> 00:05:53.160
object is not available in the

00:05:50.640 --> 00:05:55.600
production build so this is how we can

00:05:53.160 --> 00:05:58.200
exchange messages between our plugins

00:05:55.600 --> 00:06:01.479
and the client code by using websocket

00:05:58.200 --> 00:06:03.439
connection provided by V in one of the

