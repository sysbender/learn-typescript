WEBVTT

00:00:00.840 --> 00:00:05.199
so in the previous lesson we have

00:00:02.599 --> 00:00:07.599
developed the package by using V Library

00:00:05.199 --> 00:00:10.040
mode and then included that package in

00:00:07.599 --> 00:00:12.280
here in our client application and that

00:00:10.040 --> 00:00:15.000
time we had only one entry point in our

00:00:12.280 --> 00:00:17.320
package but what if we'd like to create

00:00:15.000 --> 00:00:19.800
such package that would expose more than

00:00:17.320 --> 00:00:22.159
one entry point and what I mean by that

00:00:19.800 --> 00:00:24.440
is this that we could basically import

00:00:22.159 --> 00:00:26.840
some functionality like this from the

00:00:24.440 --> 00:00:29.360
sub pass so in this lesson let's figure

00:00:26.840 --> 00:00:31.480
out how this can be done firstly let's

00:00:29.360 --> 00:00:34.800
recall what functionality our package

00:00:31.480 --> 00:00:37.400
exposes so in the index.js file of our

00:00:34.800 --> 00:00:39.440
package we have only one function plug

00:00:37.400 --> 00:00:41.719
and then to be able to import this

00:00:39.440 --> 00:00:45.079
function from the client applications we

00:00:41.719 --> 00:00:47.520
had to modify package Json file and in

00:00:45.079 --> 00:00:50.599
here we had to specify a key called

00:00:47.520 --> 00:00:53.480
module where we have basically provided

00:00:50.599 --> 00:00:55.599
the pass to our main library file with

00:00:53.480 --> 00:00:58.079
that function and then in our client

00:00:55.599 --> 00:01:00.440
application it would basically let us

00:00:58.079 --> 00:01:03.480
Import in functionality from our package

00:01:00.440 --> 00:01:05.920
by using its name like so so now we're

00:01:03.480 --> 00:01:09.199
going to create another file which will

00:01:05.920 --> 00:01:11.599
also export some functionality so in our

00:01:09.199 --> 00:01:14.760
package let's create new file called

00:01:11.599 --> 00:01:17.520
log. JS which is also inside the source

00:01:14.760 --> 00:01:20.400
folder and here for demonstration we're

00:01:17.520 --> 00:01:23.159
also going to create only one function

00:01:20.400 --> 00:01:26.320
called loog which is basically going to

00:01:23.159 --> 00:01:28.480
be a wrapper around console lock method

00:01:26.320 --> 00:01:31.159
we're not going to complicate things too

00:01:28.480 --> 00:01:33.360
much because our main job here is to

00:01:31.159 --> 00:01:35.920
configure it in such a way so it can

00:01:33.360 --> 00:01:38.199
support multiple entry points of our

00:01:35.920 --> 00:01:41.480
package so next we're going to add

00:01:38.199 --> 00:01:44.159
configuration to vid config JS file to

00:01:41.480 --> 00:01:46.719
generate two different bundles for every

00:01:44.159 --> 00:01:49.159
Javascript file of our package so that

00:01:46.719 --> 00:01:51.520
later we could import function loog from

00:01:49.159 --> 00:01:54.320
the subp pass in the client application

00:01:51.520 --> 00:01:56.679
like this so before going back to our

00:01:54.320 --> 00:01:59.560
package project let's just use this

00:01:56.679 --> 00:02:01.760
function login here to print out array

00:01:59.560 --> 00:02:04.560
of users later we're going to need this

00:02:01.760 --> 00:02:07.560
to test our package and now back to our

00:02:04.560 --> 00:02:11.119
package project let's go inside V.C

00:02:07.560 --> 00:02:13.840
config.js and here we're going to tell

00:02:11.119 --> 00:02:16.320
vit about all our entry points of our

00:02:13.840 --> 00:02:19.199
package so basically instead of

00:02:16.320 --> 00:02:22.520
specifying in here only one p we will

00:02:19.199 --> 00:02:25.040
convert this to array which will contain

00:02:22.520 --> 00:02:28.040
all references to all files that we're

00:02:25.040 --> 00:02:30.679
going to expose in our package so I'm

00:02:28.040 --> 00:02:34.280
going to add another rering here and

00:02:30.679 --> 00:02:36.599
reference that new file called log. JS

00:02:34.280 --> 00:02:39.360
so this way we have told bit about all

00:02:36.599 --> 00:02:42.480
our entry points and now let's see what

00:02:39.360 --> 00:02:45.000
will be generated when we run npm run

00:02:42.480 --> 00:02:47.480
build so basically when we'll try to

00:02:45.000 --> 00:02:50.480
build our package and as we can see VD

00:02:47.480 --> 00:02:53.239
has generated four files so two files

00:02:50.480 --> 00:02:56.079
for every entry point because in order

00:02:53.239 --> 00:02:58.639
to provide support for importing our

00:02:56.079 --> 00:03:01.400
package as a commonjs module by using

00:02:58.639 --> 00:03:03.560
functional require it generates separate

00:03:01.400 --> 00:03:06.320
bundles and that is why we have four

00:03:03.560 --> 00:03:08.679
JavaScript files here instead of two but

00:03:06.320 --> 00:03:11.639
they all have the same name so how can

00:03:08.679 --> 00:03:13.679
we customize the name and thankfully

00:03:11.639 --> 00:03:16.239
that option file name inside

00:03:13.679 --> 00:03:19.159
configuration file also can accept

00:03:16.239 --> 00:03:22.280
closure and this closure takes two

00:03:19.159 --> 00:03:24.800
parameters first one is format that we

00:03:22.280 --> 00:03:29.079
are generating bundle for either

00:03:24.800 --> 00:03:31.239
ecmascript 6 or commonjs module and the

00:03:29.079 --> 00:03:34.000
second parameter here is the source

00:03:31.239 --> 00:03:36.599
Javascript file name which is in our

00:03:34.000 --> 00:03:38.960
case all JavaScript files are contained

00:03:36.599 --> 00:03:42.040
within Source folder so the name

00:03:38.960 --> 00:03:43.800
parameter will be either index or lock

00:03:42.040 --> 00:03:46.719
and here I'm going to use basic

00:03:43.800 --> 00:03:50.000
condition and check if VD is currently

00:03:46.719 --> 00:03:52.199
generating bundle for EAS create module

00:03:50.000 --> 00:03:54.960
we're going to use the following format

00:03:52.199 --> 00:03:57.960
for the file name and if it is currently

00:03:54.960 --> 00:04:00.360
generating bundle for command JS module

00:03:57.960 --> 00:04:02.880
besides using name as a file name we're

00:04:00.360 --> 00:04:05.639
also going to use custom extension for

00:04:02.880 --> 00:04:07.599
this file specified inside format

00:04:05.639 --> 00:04:09.920
parameter and this way we have

00:04:07.599 --> 00:04:12.400
customized names that we is going to

00:04:09.920 --> 00:04:15.079
produce while generating our bundles

00:04:12.400 --> 00:04:18.040
let's see what those names are one more

00:04:15.079 --> 00:04:21.239
time let's generate our bundles by

00:04:18.040 --> 00:04:24.079
executing npm run build and this time we

00:04:21.239 --> 00:04:26.960
still see four files but all of these

00:04:24.079 --> 00:04:28.560
files now have more appropriate names

00:04:26.960 --> 00:04:31.400
and again all these files have been

00:04:28.560 --> 00:04:34.199
generated inside the disc folder of our

00:04:31.400 --> 00:04:37.320
package project so now back to file

00:04:34.199 --> 00:04:40.040
package.json and in here in order to

00:04:37.320 --> 00:04:42.639
provide the way for importing our sub

00:04:40.040 --> 00:04:45.000
module by client applications we also

00:04:42.639 --> 00:04:49.280
need to add an entry for our second

00:04:45.000 --> 00:04:52.760
entry point inside this expert object so

00:04:49.280 --> 00:04:55.040
let's add another object and use the key

00:04:52.760 --> 00:04:57.280
lock this will be a key what client

00:04:55.040 --> 00:05:00.560
applications will use when they are

00:04:57.280 --> 00:05:02.360
going to import our subm module lock

00:05:00.560 --> 00:05:05.159
just like we have already used in the

00:05:02.360 --> 00:05:07.400
main doj of our client application in

00:05:05.159 --> 00:05:09.960
this import and also since we have

00:05:07.400 --> 00:05:12.560
modified the names which we produces

00:05:09.960 --> 00:05:15.560
while generating bundles we also need to

00:05:12.560 --> 00:05:19.840
correct these names inside package.json

00:05:15.560 --> 00:05:22.920
so firstly let's replace plug word with

00:05:19.840 --> 00:05:26.760
index in all these file names and then

00:05:22.920 --> 00:05:29.440
one by one let's correct a pass so it

00:05:26.760 --> 00:05:32.320
points to the correct file from the dist

00:05:29.440 --> 00:05:35.320
folder otherwise important things from

00:05:32.320 --> 00:05:37.719
our package is not going to work and now

00:05:35.320 --> 00:05:39.440
it's time to check if we will be able to

00:05:37.719 --> 00:05:42.360
import functionality from the subm

00:05:39.440 --> 00:05:45.719
module of our package so instead of

00:05:42.360 --> 00:05:48.119
publishing our package to npm registry

00:05:45.719 --> 00:05:51.560
we have used one trick by running

00:05:48.119 --> 00:05:53.840
command npm link inside the project of

00:05:51.560 --> 00:05:56.159
our package in order to make this

00:05:53.840 --> 00:05:59.000
package available globally in the

00:05:56.159 --> 00:06:02.360
operating system and in addition to that

00:05:59.000 --> 00:06:05.199
to add a link to this package into node

00:06:02.360 --> 00:06:08.760
modules folder of the client application

00:06:05.199 --> 00:06:11.119
we had to execute npm link but with

00:06:08.760 --> 00:06:13.840
package name inside the rout of our

00:06:11.119 --> 00:06:17.719
client application and this way this

00:06:13.840 --> 00:06:20.360
commment will add link to our package

00:06:17.719 --> 00:06:23.000
inside node modules folder and finally

00:06:20.360 --> 00:06:25.880
let's get back to testing and run

00:06:23.000 --> 00:06:28.400
development server inside our client

00:06:25.880 --> 00:06:30.679
application so that we could test if we

00:06:28.400 --> 00:06:34.159
would be able to import functionality

00:06:30.679 --> 00:06:37.040
from this subm module loog and then use

00:06:34.159 --> 00:06:40.040
this imported function to print out list

00:06:37.040 --> 00:06:41.960
of users in Here and Now switch over to

00:06:40.040 --> 00:06:45.040
the browser and as we can see we have

00:06:41.960 --> 00:06:47.840
two logs here first of which is produced

00:06:45.040 --> 00:06:49.920
by our custom function log that comes

00:06:47.840 --> 00:06:51.880
from our package so importing

00:06:49.920 --> 00:06:54.880
functionality from the second entry

00:06:51.880 --> 00:06:57.199
point of our package worked fine and we

00:06:54.880 --> 00:07:00.480
could even remove this log statement and

00:06:57.199 --> 00:07:03.639
instead print out result of the function

00:07:00.480 --> 00:07:05.840
plug by using our custom loog function

00:07:03.639 --> 00:07:08.520
everything is working fine so in this

00:07:05.840 --> 00:07:10.840
lesson we have reviewed how to build our

00:07:08.520 --> 00:07:13.480
library in case it has more than one

00:07:10.840 --> 00:07:16.199
entry point and as we can see it makes

00:07:13.480 --> 00:07:18.880
this process very simple let's continue

00:07:16.199 --> 00:07:20.719
in the next lesson all right so far we

