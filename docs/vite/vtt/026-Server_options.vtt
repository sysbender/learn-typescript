WEBVTT

00:00:00.680 --> 00:00:04.760
let's consider several options which

00:00:02.800 --> 00:00:06.960
allows us to configure development

00:00:04.760 --> 00:00:10.600
server so when we start development

00:00:06.960 --> 00:00:12.399
server by running npm randev it starts

00:00:10.600 --> 00:00:14.880
with using Port

00:00:12.399 --> 00:00:18.000
5173 but then if we're going to go ahead

00:00:14.880 --> 00:00:20.600
and run another copy of this server the

00:00:18.000 --> 00:00:24.520
port will be changed dynamically because

00:00:20.600 --> 00:00:26.720
the previous Port 5173 was already taken

00:00:24.520 --> 00:00:29.040
by the previous copy of the development

00:00:26.720 --> 00:00:31.279
server and of course this port is

00:00:29.040 --> 00:00:34.000
configurable and just like other

00:00:31.279 --> 00:00:36.600
configurations we can override the port

00:00:34.000 --> 00:00:39.960
in vid configuration file so let's

00:00:36.600 --> 00:00:42.840
create an empty vid configuration file

00:00:39.960 --> 00:00:45.800
and in here we're going to specify an

00:00:42.840 --> 00:00:48.399
object under the server key where we can

00:00:45.800 --> 00:00:51.239
configure several aspects of the V

00:00:48.399 --> 00:00:55.399
development server so for example I want

00:00:51.239 --> 00:00:58.680
the port to be 33 33 and now after

00:00:55.399 --> 00:01:01.600
running npm randale we can notice that

00:00:58.680 --> 00:01:04.200
the port we just specified was used for

00:01:01.600 --> 00:01:06.319
development server but still if we're

00:01:04.200 --> 00:01:09.200
going to launch another copy of the

00:01:06.319 --> 00:01:11.479
server the port will be changed and this

00:01:09.200 --> 00:01:13.600
is a pretty convenient behavor but in

00:01:11.479 --> 00:01:16.040
case we'd like this commment to throw an

00:01:13.600 --> 00:01:17.040
error if the specified Port was already

00:01:16.040 --> 00:01:19.279
taken

00:01:17.040 --> 00:01:22.560
we can specify another configuration

00:01:19.279 --> 00:01:24.800
option called restrict port with the Val

00:01:22.560 --> 00:01:27.239
true and now if we're going to launch

00:01:24.800 --> 00:01:29.319
one instance of the development server

00:01:27.239 --> 00:01:31.760
and then we'll try to launch another

00:01:29.319 --> 00:01:34.560
instance in this case instead of picking

00:01:31.760 --> 00:01:37.000
up Port which is available it will throw

00:01:34.560 --> 00:01:40.520
an error CU part

00:01:37.000 --> 00:01:43.560
3333 is already in use another option

00:01:40.520 --> 00:01:46.880
called headers allows us to specify

00:01:43.560 --> 00:01:49.120
custom headers for we responses as an

00:01:46.880 --> 00:01:52.680
example let's specify one header with a

00:01:49.120 --> 00:01:55.600
name a and the value B and then in the

00:01:52.680 --> 00:01:58.439
browser if we'll inspect the request for

00:01:55.600 --> 00:02:01.760
fetching the current page in here under

00:01:58.439 --> 00:02:04.399
the response headers we are noticing our

00:02:01.760 --> 00:02:06.720
custom header a and this header will be

00:02:04.399 --> 00:02:09.479
added not only in the response for

00:02:06.720 --> 00:02:12.479
fetching the current page but also for

00:02:09.479 --> 00:02:15.479
fetching other assets such as JavaScript

00:02:12.479 --> 00:02:17.960
files another interesting option is

00:02:15.479 --> 00:02:21.359
called proxy and what this will allow us

00:02:17.960 --> 00:02:24.000
to do is to provide custom URLs which

00:02:21.359 --> 00:02:28.120
will be accessible from our Dev server

00:02:24.000 --> 00:02:31.520
for example I want to use URL SL

00:02:28.120 --> 00:02:33.800
products to fetch list of dummy products

00:02:31.520 --> 00:02:37.080
during development and we can achieve

00:02:33.800 --> 00:02:40.520
this by specifying custom option proxy

00:02:37.080 --> 00:02:43.160
this option holds an object where keys

00:02:40.520 --> 00:02:45.880
are addresses that would like to be

00:02:43.160 --> 00:02:48.840
accessible and the values for those keys

00:02:45.880 --> 00:02:51.960
will be addresses that do it is going to

00:02:48.840 --> 00:02:54.439
redirect those requests so for this

00:02:51.960 --> 00:02:57.800
particular example I'm going to use

00:02:54.439 --> 00:03:01.160
third party servers called dami Json

00:02:57.800 --> 00:03:03.160
which provides us with dami API it

00:03:01.160 --> 00:03:06.479
basically gives us set of dumy end

00:03:03.160 --> 00:03:09.479
points which we can use during our local

00:03:06.479 --> 00:03:12.040
development so in this case I have used

00:03:09.479 --> 00:03:14.640
the first end point products and now

00:03:12.040 --> 00:03:16.880
while accessing this endpoint products

00:03:14.640 --> 00:03:19.479
from our local Dev server

00:03:16.880 --> 00:03:22.880
I'm supposed to get list of fetched

00:03:19.479 --> 00:03:25.239
products received from damage Json API

00:03:22.880 --> 00:03:27.920
that's exactly what we're seeing but

00:03:25.239 --> 00:03:31.000
also besides specifying only addresses

00:03:27.920 --> 00:03:33.600
for keys inside a proxy object we can

00:03:31.000 --> 00:03:36.200
also provide more detail configuration

00:03:33.600 --> 00:03:38.600
in the form of object so for example I

00:03:36.200 --> 00:03:41.520
want to have an API Road in my

00:03:38.600 --> 00:03:44.560
development server which is going to

00:03:41.520 --> 00:03:46.920
redirect me to that same damage Json

00:03:44.560 --> 00:03:49.520
service but while r correcting me to

00:03:46.920 --> 00:03:52.479
these servers I don't want to include

00:03:49.520 --> 00:03:55.720
API segment in the address so I'm

00:03:52.479 --> 00:03:57.760
basically going to modify the final URL

00:03:55.720 --> 00:04:01.160
which is going to be used to make a

00:03:57.760 --> 00:04:04.200
request to damage is on API by

00:04:01.160 --> 00:04:07.479
completely removing API segment from the

00:04:04.200 --> 00:04:09.439
URL like so and this configuration is

00:04:07.479 --> 00:04:11.800
going to allow me to do the following

00:04:09.439 --> 00:04:13.960
type of requests for example if I'm

00:04:11.800 --> 00:04:17.279
going to refer to

00:04:13.960 --> 00:04:20.000
/i/ products since a API segment will be

00:04:17.279 --> 00:04:22.840
removed the result in url will be as

00:04:20.000 --> 00:04:26.760
follows so only products segment will be

00:04:22.840 --> 00:04:29.120
added to the end of the D jon.com domain

00:04:26.760 --> 00:04:33.560
so now let's try to call this URL in the

00:04:29.120 --> 00:04:35.520
browser /i/ products this time I'm

00:04:33.560 --> 00:04:38.200
receiving an error with an error code of

00:04:35.520 --> 00:04:40.800
500 this error has something to do with

00:04:38.200 --> 00:04:43.399
different Origins so without getting too

00:04:40.800 --> 00:04:46.560
far of the topic the documentation

00:04:43.399 --> 00:04:49.120
suggests us to use another option chain

00:04:46.560 --> 00:04:52.359
origin with the Val through to avoid

00:04:49.120 --> 00:04:54.160
errors related to different Origins so

00:04:52.359 --> 00:04:57.640
now if I'm going to make that same

00:04:54.160 --> 00:04:59.800
request on API SL products I'm receiving

00:04:57.640 --> 00:05:02.239
the list of products but this time we

00:04:59.800 --> 00:05:04.720
can do even more for example let's use

00:05:02.239 --> 00:05:08.200
different URL let's try to fetch list of

00:05:04.720 --> 00:05:10.920
posts by using post URL and to do this I

00:05:08.200 --> 00:05:13.720
simply have to change the segment on

00:05:10.920 --> 00:05:16.120
posts like so as we can see it has

00:05:13.720 --> 00:05:18.359
worked and we got list of posts in the

00:05:16.120 --> 00:05:20.319
response so for now we were only

00:05:18.359 --> 00:05:22.720
specifying all configurations for the

00:05:20.319 --> 00:05:25.120
server under the server key in the

00:05:22.720 --> 00:05:27.560
configuration file but we can also

00:05:25.120 --> 00:05:29.880
assign separate configurations for the

00:05:27.560 --> 00:05:32.080
preview server so let's build this

00:05:29.880 --> 00:05:35.359
project for production by running npm

00:05:32.080 --> 00:05:38.399
run build and then run preview server by

00:05:35.359 --> 00:05:40.800
executing npm run preview as we can see

00:05:38.399 --> 00:05:42.080
the default part of the preview server

00:05:40.800 --> 00:05:44.720
is

00:05:42.080 --> 00:05:47.160
4173 let's just try to overwrite some

00:05:44.720 --> 00:05:50.120
configurations for the view server for

00:05:47.160 --> 00:05:53.040
that I'm going to copy over this object

00:05:50.120 --> 00:05:56.080
paste it down here and rename option

00:05:53.040 --> 00:05:58.160
server on preview and this configuration

00:05:56.080 --> 00:06:00.600
will only be applicable for the preview

00:05:58.160 --> 00:06:02.920
server let's change something in this

00:06:00.600 --> 00:06:05.720
configuration for example let's use

00:06:02.920 --> 00:06:09.080
different port remove this headers

00:06:05.720 --> 00:06:11.960
object and add another option called

00:06:09.080 --> 00:06:14.399
open here we can specify which address

00:06:11.960 --> 00:06:16.880
should be open in a browser by default

00:06:14.399 --> 00:06:21.399
after starting preview server I'm going

00:06:16.880 --> 00:06:23.560
to specify our custom URL API SL

00:06:21.399 --> 00:06:26.399
products and just because we have

00:06:23.560 --> 00:06:29.600
previously configured proxy a request

00:06:26.399 --> 00:06:31.960
was made to the following URL API

00:06:29.600 --> 00:06:34.080
products and we got the list of products

00:06:31.960 --> 00:06:36.200
on the page and this is how we can

00:06:34.080 --> 00:06:38.160
override configurations for the preview

00:06:36.200 --> 00:06:40.720
server as well as for the development

00:06:38.160 --> 00:06:43.239
server in fact there are many more

00:06:40.720 --> 00:06:45.399
configurations for configuring servers

00:06:43.239 --> 00:06:47.239
and all of them are described in details

00:06:45.399 --> 00:06:49.239
in the official withd

00:06:47.239 --> 00:06:51.160
documentation in one of the previous

