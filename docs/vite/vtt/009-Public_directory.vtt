WEBVTT

00:00:01.119 --> 00:00:05.280
rot to VD project there is a special

00:00:03.000 --> 00:00:07.599
folder called public and this is the

00:00:05.280 --> 00:00:09.800
folder where we can store all our static

00:00:07.599 --> 00:00:11.839
assets but of course as we have already

00:00:09.800 --> 00:00:14.400
seen static assets can be stored in

00:00:11.839 --> 00:00:16.480
different directories such as source so

00:00:14.400 --> 00:00:18.480
what's special about this public folder

00:00:16.480 --> 00:00:21.200
then and the thing is that all static

00:00:18.480 --> 00:00:24.200
files stored within public folder they

00:00:21.200 --> 00:00:26.079
cannot be referenced in our source files

00:00:24.200 --> 00:00:28.160
for for example we cannot import them

00:00:26.079 --> 00:00:31.200
like this as we are importing

00:00:28.160 --> 00:00:33.720
javascript. SVG file in here so that

00:00:31.200 --> 00:00:36.040
means that VD does not process all those

00:00:33.720 --> 00:00:38.480
files that are stored within public

00:00:36.040 --> 00:00:41.160
folder let's see an example I'm going to

00:00:38.480 --> 00:00:43.599
add one more image tag in here and a

00:00:41.160 --> 00:00:47.800
reference image from public folder with

00:00:43.599 --> 00:00:50.920
a name v. SVG so at this point our page

00:00:47.800 --> 00:00:53.599
shows two different images One image was

00:00:50.920 --> 00:00:55.880
imported directly in our source file and

00:00:53.599 --> 00:00:58.240
browser has EST at the module which

00:00:55.880 --> 00:01:00.880
experts pass to the first image

00:00:58.240 --> 00:01:03.160
javascript. SVG this is the image which

00:01:00.880 --> 00:01:05.880
was referenced from within our source

00:01:03.160 --> 00:01:08.240
file so we manually imported this image

00:01:05.880 --> 00:01:10.560
as a kript module but if we take a look

00:01:08.240 --> 00:01:12.720
at another image and the way how this

00:01:10.560 --> 00:01:14.760
image was fetched we will see that in

00:01:12.720 --> 00:01:17.640
this case browser has requested this

00:01:14.760 --> 00:01:20.640
image directly by its name as a normal

00:01:17.640 --> 00:01:23.640
static file and so whenever we want some

00:01:20.640 --> 00:01:24.920
static assets to be accessible as normal

00:01:23.640 --> 00:01:27.400
static files

00:01:24.920 --> 00:01:29.800
so we can reference them by name we have

00:01:27.400 --> 00:01:32.599
to place such files within special

00:01:29.800 --> 00:01:34.839
public folder in vid project and by the

00:01:32.599 --> 00:01:37.680
way all the files that we will store

00:01:34.839 --> 00:01:40.079
within special public folder they cannot

00:01:37.680 --> 00:01:42.000
be referenced from within source code

00:01:40.079 --> 00:01:44.760
meaning that we cannot import them

00:01:42.000 --> 00:01:47.359
directly as sigas script modules from

00:01:44.760 --> 00:01:49.800
within JavaScript code and all files

00:01:47.359 --> 00:01:51.839
that are located within public folder

00:01:49.800 --> 00:01:54.400
they will not be processed by V during

00:01:51.839 --> 00:01:57.400
the build so for example if I'm going to

00:01:54.400 --> 00:02:00.960
will try to build this project right now

00:01:57.400 --> 00:02:02.960
by running npm run build in the terminal

00:02:00.960 --> 00:02:06.240
among the build Assets in here I'm going

00:02:02.960 --> 00:02:08.880
to see that JavaScript image which we

00:02:06.240 --> 00:02:11.520
referenced in the source code so with

00:02:08.880 --> 00:02:13.800
while importing this image has made some

00:02:11.520 --> 00:02:16.839
transformations to it and appended

00:02:13.800 --> 00:02:19.240
random hash to its name but in this

00:02:16.839 --> 00:02:22.800
output we don't actually see another

00:02:19.240 --> 00:02:25.440
image with the name v. SVG which we have

00:02:22.800 --> 00:02:28.800
placed into public folder and referenced

00:02:25.440 --> 00:02:33.119
in HTML file and that means vid hasn't

00:02:28.800 --> 00:02:35.680
done any transformations to v.svg image

00:02:33.119 --> 00:02:38.720
so what it did instead is it took this

00:02:35.680 --> 00:02:42.119
image from the public folder and copied

00:02:38.720 --> 00:02:44.720
it into this folder and this this folder

00:02:42.119 --> 00:02:47.599
was generated by running npm run build

00:02:44.720 --> 00:02:51.000
command so this is the folder where it

00:02:47.599 --> 00:02:53.119
places all buildt files of our project

00:02:51.000 --> 00:02:56.760
for example we want public folder to be

00:02:53.119 --> 00:02:59.280
renamed on build folder for such cases V

00:02:56.760 --> 00:03:02.720
provides us with another option that we

00:02:59.280 --> 00:03:05.960
can add into the VD config SVG called

00:03:02.720 --> 00:03:08.800
public deer and in here we specify

00:03:05.960 --> 00:03:11.480
desired folder name for static assets

00:03:08.800 --> 00:03:13.839
I'm going to specify build of course

00:03:11.480 --> 00:03:17.280
after this I also have to rename public

00:03:13.839 --> 00:03:20.359
folder on build and let's try to run the

00:03:17.280 --> 00:03:22.680
build Again by running npm run build in

00:03:20.359 --> 00:03:25.560
the terminal as we can see this time

00:03:22.680 --> 00:03:28.359
build was also finished successfully and

00:03:25.560 --> 00:03:31.079
that static file v. SVG was successfully

00:03:28.359 --> 00:03:34.119
copied from the build folder into our

00:03:31.079 --> 00:03:36.520
dist folder with a build project so that

00:03:34.119 --> 00:03:39.680
means that vid has recognized new name

00:03:36.520 --> 00:03:42.319
for our static folder built and we are

00:03:39.680 --> 00:03:45.640
still able to reference our static file

00:03:42.319 --> 00:03:48.240
with SVG from the source code so let's

00:03:45.640 --> 00:03:51.920
remove that option public deer as well

00:03:48.240 --> 00:03:54.599
as folder with a build project disc and

00:03:51.920 --> 00:03:57.079
let's rename folder with static file

00:03:54.599 --> 00:03:59.280
back to public and just to make sure

00:03:57.079 --> 00:04:02.200
that we haven't broken anything let's

00:03:59.280 --> 00:04:04.839
run the build common again and see if

00:04:02.200 --> 00:04:07.200
project will be built successfully as we

00:04:04.839 --> 00:04:10.240
can see nothing was broken and built

00:04:07.200 --> 00:04:13.079
still works and besides these comons npm

00:04:10.240 --> 00:04:16.079
run Dev to run development server and

00:04:13.079 --> 00:04:19.079
npm run build to build a project for

00:04:16.079 --> 00:04:21.880
production initially we also defines

00:04:19.079 --> 00:04:24.880
another comment called preview which is

00:04:21.880 --> 00:04:27.839
going to run simple static server ser

00:04:24.880 --> 00:04:30.720
and this server is mainly used to serve

00:04:27.839 --> 00:04:32.760
folder with built project files and this

00:04:30.720 --> 00:04:35.079
way we can check how our project is

00:04:32.760 --> 00:04:37.079
going to behave by using production

00:04:35.079 --> 00:04:39.200
build files in the production like

00:04:37.079 --> 00:04:41.440
environment so now that we have already

00:04:39.200 --> 00:04:44.880
built the project and generated this

00:04:41.440 --> 00:04:48.119
folder we can run this npm run preview

00:04:44.880 --> 00:04:51.400
command to run static server inside of

00:04:48.119 --> 00:04:54.160
that dist folder let's do so by running

00:04:51.400 --> 00:04:56.760
npm run preview as we can see this

00:04:54.160 --> 00:04:59.760
static server was run on Port

00:04:56.760 --> 00:05:02.440
4173 and by opening up this address in

00:04:59.760 --> 00:05:05.440
the browser we don't see any visual

00:05:02.440 --> 00:05:08.200
changes our project still looks like in

00:05:05.440 --> 00:05:10.559
the development mode but in fact if we

00:05:08.200 --> 00:05:14.119
will take a look at the request which

00:05:10.559 --> 00:05:16.760
fetches main Javascript file we are not

00:05:14.119 --> 00:05:19.240
going to see any ecmascript import

00:05:16.760 --> 00:05:22.119
statements in here because during the

00:05:19.240 --> 00:05:25.319
production build VD has actually taken

00:05:22.119 --> 00:05:28.720
all the modules and bundled them within

00:05:25.319 --> 00:05:31.200
one JavaScript file and this resulting

00:05:28.720 --> 00:05:33.640
Javascript file was fetched in one go in

00:05:31.200 --> 00:05:36.440
the browser and this is how we can run

00:05:33.640 --> 00:05:39.280
simple static server to serve all the

00:05:36.440 --> 00:05:41.400
files from the build folder now let's go

00:05:39.280 --> 00:05:43.640
back stop this startic server and

00:05:41.400 --> 00:05:46.800
instead run development server by

00:05:43.640 --> 00:05:48.920
running npm runev and since we don't

00:05:46.800 --> 00:05:52.599
need the folder with a build project

00:05:48.920 --> 00:05:55.760
anymore let's remove it and finish this

00:05:52.599 --> 00:05:57.680
lesson V ports Import in several modules

