WEBVTT

00:00:01.239 --> 00:00:05.640
lessons we have implemented the custom

00:00:03.160 --> 00:00:09.279
withd plugin which allows us to import

00:00:05.640 --> 00:00:11.319
CSV files inside JavaScript modules

00:00:09.279 --> 00:00:14.720
inside of our main Javascript file we

00:00:11.319 --> 00:00:16.960
are importing the file products. CSV and

00:00:14.720 --> 00:00:20.279
then rough content of the CSV file will

00:00:16.960 --> 00:00:23.160
be transformed by our plugin and turned

00:00:20.279 --> 00:00:24.800
into array of JavaScript objects and

00:00:23.160 --> 00:00:27.160
from the code point of view it looks

00:00:24.800 --> 00:00:29.520
like this inside of the configuration

00:00:27.160 --> 00:00:32.600
file where in including this plugin by

00:00:29.520 --> 00:00:35.520
calling Factory function CSV which we

00:00:32.600 --> 00:00:37.439
are importing from V plugin CSV file

00:00:35.520 --> 00:00:39.680
let's open up this file and take a look

00:00:37.439 --> 00:00:41.439
at the implementation so here we're

00:00:39.680 --> 00:00:44.040
basically using the hook called

00:00:41.439 --> 00:00:47.239
transform which will be called by we any

00:00:44.040 --> 00:00:49.800
time we are going to import CSV files in

00:00:47.239 --> 00:00:52.239
easr modules and then we're basically

00:00:49.800 --> 00:00:55.040
converting the row content of the CSV

00:00:52.239 --> 00:00:57.960
file into valid JavaScript array of

00:00:55.040 --> 00:01:00.560
objects by using this function pars and

00:00:57.960 --> 00:01:03.200
at the end we are returning valid easr

00:01:00.560 --> 00:01:05.520
module to the client which contains the

00:01:03.200 --> 00:01:08.239
data from the CSV file in the form of

00:01:05.520 --> 00:01:10.800
array of JavaScript objects and here is

00:01:08.239 --> 00:01:13.399
how our products. CSV file currently

00:01:10.800 --> 00:01:16.239
looks like that we are importing in our

00:01:13.399 --> 00:01:18.080
main Javascript file right here and then

00:01:16.239 --> 00:01:20.160
we're basically injecting the content

00:01:18.080 --> 00:01:23.760
that we have received after importing

00:01:20.160 --> 00:01:25.600
that CSV file into the prech and which

00:01:23.760 --> 00:01:28.160
is why we're seeing the content of the

00:01:25.600 --> 00:01:30.720
CSV file on this page but the the thing

00:01:28.160 --> 00:01:33.399
is that now if we're going to update the

00:01:30.720 --> 00:01:36.000
content of the CSV file it will cause

00:01:33.399 --> 00:01:37.960
the full page refresh of the browser and

00:01:36.000 --> 00:01:41.840
just to see it in action let's create

00:01:37.960 --> 00:01:43.840
arbitrary constant plugin and see if

00:01:41.840 --> 00:01:46.319
this plug-in constant will still be

00:01:43.840 --> 00:01:49.080
available after we're going to modify

00:01:46.319 --> 00:01:51.359
CSV file let's just go ahead and make

00:01:49.080 --> 00:01:54.160
any modification to the content of the

00:01:51.359 --> 00:01:57.080
products. CSV file I'm basically going

00:01:54.160 --> 00:01:59.399
to add another row in here and then in

00:01:57.080 --> 00:02:02.279
the browser let's see if the plugin

00:01:59.399 --> 00:02:04.560
constant is still available so first of

00:02:02.279 --> 00:02:07.120
all we're seeing here that the new line

00:02:04.560 --> 00:02:09.399
that was added in the CSV file was

00:02:07.120 --> 00:02:12.359
appeared on this page but the plugin

00:02:09.399 --> 00:02:14.720
constant is undefined because browser

00:02:12.359 --> 00:02:17.080
has made full page refresh in order to

00:02:14.720 --> 00:02:19.560
update the content on the page so now

00:02:17.080 --> 00:02:22.439
we're going to implement support of

00:02:19.560 --> 00:02:24.680
so-called hot module replacement for our

00:02:22.439 --> 00:02:27.319
plug-in and this technique basically

00:02:24.680 --> 00:02:29.600
allows us to update modules that are

00:02:27.319 --> 00:02:33.120
modified F without doing the full page

00:02:29.600 --> 00:02:35.920
refresh in the browser it's called HMR

00:02:33.120 --> 00:02:37.840
which stands for hot module replacement

00:02:35.920 --> 00:02:40.399
and in order to implement hot module

00:02:37.840 --> 00:02:43.680
replacement for our plugin we need to

00:02:40.399 --> 00:02:46.040
use another hook provided by vit called

00:02:43.680 --> 00:02:48.479
handle hot update this Hook is going to

00:02:46.040 --> 00:02:51.760
do a synchronous operation so let's mark

00:02:48.479 --> 00:02:54.560
this function as an as sync function and

00:02:51.760 --> 00:02:58.080
as a first parameter into this function

00:02:54.560 --> 00:02:59.840
V will'll pass context object so this

00:02:58.080 --> 00:03:02.600
function will be called anytime we're

00:02:59.840 --> 00:03:05.120
going to modify any module that we are

00:03:02.600 --> 00:03:07.160
currently importing in our JavaScript

00:03:05.120 --> 00:03:09.720
files but we don't need to listen for

00:03:07.160 --> 00:03:13.160
all updates but only for updates that

00:03:09.720 --> 00:03:15.840
happen to CSV files so let's use the

00:03:13.160 --> 00:03:19.120
same condition we have used in the

00:03:15.840 --> 00:03:22.880
transform hook and check if modification

00:03:19.120 --> 00:03:25.000
has been done to CSV file only then

00:03:22.880 --> 00:03:27.640
we're going to run this logic inside

00:03:25.000 --> 00:03:29.120
this if conditional but here in order to

00:03:27.640 --> 00:03:31.560
to access the file name which was

00:03:29.120 --> 00:03:34.479
updated we need to reference property

00:03:31.560 --> 00:03:36.040
file on this context object and the way

00:03:34.479 --> 00:03:39.439
we're going to implement hot module

00:03:36.040 --> 00:03:42.600
replacement is by leveraging websocket

00:03:39.439 --> 00:03:45.840
connection and firing custom event to

00:03:42.600 --> 00:03:48.520
the client by using method send on the

00:03:45.840 --> 00:03:50.239
websocket object like this and then we

00:03:48.520 --> 00:03:52.960
also have to specify custom

00:03:50.239 --> 00:03:56.160
configuration for this event let's

00:03:52.960 --> 00:04:00.720
specify the type which will be a custom

00:03:56.160 --> 00:04:03.359
the event name Will will be CSV D update

00:04:00.720 --> 00:04:04.960
here we can use any kind of name we like

00:04:03.359 --> 00:04:07.439
later we're going to listen to this

00:04:04.960 --> 00:04:10.160
event in the client code and then we

00:04:07.439 --> 00:04:12.399
also have to specify the data key and

00:04:10.160 --> 00:04:14.439
this key will basically store the

00:04:12.399 --> 00:04:16.920
content which we're going to send to the

00:04:14.439 --> 00:04:19.359
client for now let's just read the

00:04:16.920 --> 00:04:21.800
content of the updated CSV file by

00:04:19.359 --> 00:04:24.120
calling method read on the context

00:04:21.800 --> 00:04:26.399
object and since this mthod isn't

00:04:24.120 --> 00:04:28.880
synchronous we have to await the

00:04:26.399 --> 00:04:31.760
response and then then assign it to the

00:04:28.880 --> 00:04:34.439
data property like so and right after

00:04:31.760 --> 00:04:36.560
that just to tell it that we are going

00:04:34.439 --> 00:04:39.000
to take care about hot module

00:04:36.560 --> 00:04:41.520
replacement ourselves we need to notify

00:04:39.000 --> 00:04:44.680
Vi about it by simply returning an empty

00:04:41.520 --> 00:04:46.640
array from this method like this so now

00:04:44.680 --> 00:04:48.520
let's try it out one more time and check

00:04:46.640 --> 00:04:51.080
if the constant that we're going to

00:04:48.520 --> 00:04:54.359
declare in here will be available even

00:04:51.080 --> 00:04:56.479
after we're going to modify CSV file so

00:04:54.359 --> 00:04:59.319
I'm going to remove the last line of the

00:04:56.479 --> 00:05:01.880
CSV file and check if the plug-in

00:04:59.319 --> 00:05:04.520
constant is still available so as we can

00:05:01.880 --> 00:05:07.479
see it is still defined that means the

00:05:04.520 --> 00:05:09.399
browser hasn't reloaded the page but we

00:05:07.479 --> 00:05:11.840
also haven't seen any changes to the

00:05:09.399 --> 00:05:13.680
content on the page because we are

00:05:11.840 --> 00:05:16.359
currently not listening to the custom

00:05:13.680 --> 00:05:18.120
event that we are firing from the server

00:05:16.359 --> 00:05:20.600
so this was the first part of

00:05:18.120 --> 00:05:22.680
implementing the hot module replacement

00:05:20.600 --> 00:05:25.000
which is firing an event from the server

00:05:22.680 --> 00:05:27.200
to the client the next part is to

00:05:25.000 --> 00:05:29.720
actually listen for this event on the

00:05:27.200 --> 00:05:32.319
client side so I'm going to switch over

00:05:29.720 --> 00:05:35.279
to the client script and in here first

00:05:32.319 --> 00:05:37.120
of all let's check if the object which

00:05:35.279 --> 00:05:40.359
is responsible for hot module

00:05:37.120 --> 00:05:43.160
replacement exists this object is stored

00:05:40.359 --> 00:05:45.560
on The Meta property of an import object

00:05:43.160 --> 00:05:47.600
and if so we're going to register a

00:05:45.560 --> 00:05:50.080
listener for the custom event we have

00:05:47.600 --> 00:05:54.040
specified on the server with the name

00:05:50.080 --> 00:05:57.680
CSV update and as a second argument to

00:05:54.040 --> 00:06:00.279
this function we have to pass closure

00:05:57.680 --> 00:06:02.479
with one parameter and this parameter is

00:06:00.279 --> 00:06:05.279
basically going to store the data that

00:06:02.479 --> 00:06:08.080
we have specified under the data key

00:06:05.279 --> 00:06:09.600
while sending this event right here so

00:06:08.080 --> 00:06:11.720
first of all let's check it out what

00:06:09.600 --> 00:06:14.479
we're going to receive in this data

00:06:11.720 --> 00:06:17.880
parameter I'm going to printed out in a

00:06:14.479 --> 00:06:19.720
console let's switch over to the browser

00:06:17.880 --> 00:06:23.880
as we can see currently I have three

00:06:19.720 --> 00:06:26.680
products in my CSV file let's go there

00:06:23.880 --> 00:06:28.960
and change the content and after that in

00:06:26.680 --> 00:06:32.319
the browser we can see that the console

00:06:28.960 --> 00:06:35.520
shows new content of the CSV file

00:06:32.319 --> 00:06:37.479
including our latest product Edition so

00:06:35.520 --> 00:06:41.160
now we're going to get to updates on the

00:06:37.479 --> 00:06:44.120
actual page because after CSV file is

00:06:41.160 --> 00:06:46.640
modified we need to properly change the

00:06:44.120 --> 00:06:48.960
content on the page to do so in our

00:06:46.640 --> 00:06:52.880
client script I'm going to copy this

00:06:48.960 --> 00:06:54.560
line and paste it into this Handler so

00:06:52.880 --> 00:06:56.960
anytime we're going to receive the new

00:06:54.560 --> 00:06:57.800
content from the server we're going to

00:06:56.960 --> 00:07:00.800
update

00:06:57.800 --> 00:07:03.200
the content of the preag by assigning

00:07:00.800 --> 00:07:05.600
updated content but currently this

00:07:03.200 --> 00:07:07.800
content will be ped as a row content of

00:07:05.600 --> 00:07:11.000
the CSV file but what we need to do

00:07:07.800 --> 00:07:14.560
instead in our plugin is to actually

00:07:11.000 --> 00:07:17.399
transform CSV content into JavaScript

00:07:14.560 --> 00:07:20.319
array by calling function pars just like

00:07:17.399 --> 00:07:23.279
we have done in this transform hook so

00:07:20.319 --> 00:07:26.080
let's wrap the content of the CSV file

00:07:23.279 --> 00:07:27.960
in the pars function call and this way

00:07:26.080 --> 00:07:30.800
client application will receive

00:07:27.960 --> 00:07:33.399
JavaScript array instead of a row CSV

00:07:30.800 --> 00:07:36.160
content so now back to the browser and

00:07:33.399 --> 00:07:39.080
check it out once again initially I have

00:07:36.160 --> 00:07:41.239
four products in my CSV file let's

00:07:39.080 --> 00:07:43.239
remove the last product from here and

00:07:41.239 --> 00:07:45.520
see how it will be reflected in a

00:07:43.239 --> 00:07:48.120
browser as you can see content was

00:07:45.520 --> 00:07:50.960
changed and now instead of four products

00:07:48.120 --> 00:07:54.239
I have only three which corresponds to

00:07:50.960 --> 00:07:56.000
the latest content of the CSV file and

00:07:54.239 --> 00:07:58.680
that means that our hot module

00:07:56.000 --> 00:08:00.840
replacement worked and from the server y

00:07:58.680 --> 00:08:03.279
websocket connection we have received

00:08:00.840 --> 00:08:06.279
updated content of the CSV file in the

00:08:03.279 --> 00:08:08.399
form of array of objects and of course

00:08:06.279 --> 00:08:11.960
now as soon as I'm going to do any kind

00:08:08.399 --> 00:08:14.960
of modifications to the CSV file

00:08:11.960 --> 00:08:17.560
instantly I'm going to see those changes

00:08:14.960 --> 00:08:20.279
reflected on the page so as we can see

00:08:17.560 --> 00:08:22.120
our for product was back and now let's

00:08:20.279 --> 00:08:25.080
just do one little Improvement to our

00:08:22.120 --> 00:08:28.359
plugin by passing structured data to the

00:08:25.080 --> 00:08:31.040
client so I'm going to to send an object

00:08:28.359 --> 00:08:34.239
with two properties First Property will

00:08:31.040 --> 00:08:37.040
be a URL and second one data URL will

00:08:34.239 --> 00:08:39.600
store the pass to the module that was

00:08:37.040 --> 00:08:41.960
updated and the data will store the new

00:08:39.600 --> 00:08:44.720
transformed content of the updated

00:08:41.960 --> 00:08:46.800
module let's just add more descriptive

00:08:44.720 --> 00:08:50.960
message on the client side in the

00:08:46.800 --> 00:08:54.279
console and say which module was

00:08:50.960 --> 00:08:57.479
updated and here we have to destructure

00:08:54.279 --> 00:08:59.479
two properties URL and the data those

00:08:57.479 --> 00:09:01.760
are two properties we have just

00:08:59.479 --> 00:09:04.560
specified in the source code of our

00:09:01.760 --> 00:09:07.399
plugin right here so now let's check it

00:09:04.560 --> 00:09:09.960
out one more time in a browser we'll

00:09:07.399 --> 00:09:11.720
create constant plugin and if this

00:09:09.960 --> 00:09:14.760
constant will be available this will be

00:09:11.720 --> 00:09:17.520
a sign that the browser hasn't done full

00:09:14.760 --> 00:09:20.479
page refresh so after modifying the

00:09:17.520 --> 00:09:23.560
content of the products. CSV file we can

00:09:20.479 --> 00:09:26.000
see that it was reflected on the page as

00:09:23.560 --> 00:09:28.840
well as we can see the new loog which

00:09:26.000 --> 00:09:31.560
shows the pass to the file which was

00:09:28.840 --> 00:09:34.760
updated and of course the constant

00:09:31.560 --> 00:09:37.880
plugin is still available so our hot

00:09:34.760 --> 00:09:40.160
module replacement for CSV files works

00:09:37.880 --> 00:09:43.080
great and this is how we can Implement

00:09:40.160 --> 00:09:45.120
hot modu replacement in withd projects

00:09:43.080 --> 00:09:48.479
by basically using the function handle

00:09:45.120 --> 00:09:50.640
hot update in our plugin and then

00:09:48.479 --> 00:09:53.399
sending custom event via websocket to

00:09:50.640 --> 00:09:55.439
the client with appropriate payload and

00:09:53.399 --> 00:09:58.000
then on the client side we are

00:09:55.439 --> 00:10:01.399
registering The Listener for this when

00:09:58.000 --> 00:10:03.960
accept updated data and then do whatever

00:10:01.399 --> 00:10:06.960
we need with this updated data in order

00:10:03.960 --> 00:10:08.920
to apply hot module replacement update

00:10:06.960 --> 00:10:12.359
so this was one of the ways how we can

00:10:08.920 --> 00:10:14.319
Implement hot module replacement in vit

