WEBVTT

00:00:02.600 --> 00:00:07.600
CSS pre-processors in vid projects and

00:00:05.640 --> 00:00:10.559
for demonstration purposes we're going

00:00:07.600 --> 00:00:12.720
to use SAS so let's open up ourain

00:00:10.559 --> 00:00:15.880
Javascript file and import new

00:00:12.720 --> 00:00:18.240
stylesheet with the name 6. CSS let's go

00:00:15.880 --> 00:00:20.640
ahead and create this file in assets

00:00:18.240 --> 00:00:23.679
folder by the way this will be a SAS

00:00:20.640 --> 00:00:26.559
file so in main.js let's change this

00:00:23.679 --> 00:00:29.880
extension on SAS and now we're basically

00:00:26.559 --> 00:00:33.000
going to use arbitrary CSS rule convert

00:00:29.880 --> 00:00:35.480
this rule in valid SAS

00:00:33.000 --> 00:00:36.360
syntax and then let's also switch over

00:00:35.480 --> 00:00:39.320
to

00:00:36.360 --> 00:00:41.880
index.html and remove all Tailwind CSS

00:00:39.320 --> 00:00:44.440
classes that were left since previous

00:00:41.880 --> 00:00:48.320
lesson V provides support for different

00:00:44.440 --> 00:00:50.720
CSS pre-processors such as SS Les stylus

00:00:48.320 --> 00:00:53.640
out of the box so all we have to do is

00:00:50.720 --> 00:00:56.279
to install CSS pre processor with lu to

00:00:53.640 --> 00:00:58.799
use in our case we're using sus so let's

00:00:56.279 --> 00:01:01.559
run this command and install CSS

00:00:58.799 --> 00:01:04.440
compiler after that we need to restart

00:01:01.559 --> 00:01:06.840
our development server so let's run npm

00:01:04.440 --> 00:01:08.919
Rand there once again and in a browser

00:01:06.840 --> 00:01:11.840
we'll see that those styles that have

00:01:08.919 --> 00:01:14.440
been specified Within SAS file have been

00:01:11.840 --> 00:01:17.120
applied that means SAS successfully

00:01:14.440 --> 00:01:19.919
compiled our source file and it was

00:01:17.120 --> 00:01:22.399
successfully served to a browser and as

00:01:19.919 --> 00:01:24.519
a response VD has returned compiled CSS

00:01:22.399 --> 00:01:28.000
file in the form of string which has

00:01:24.519 --> 00:01:30.279
been assigned to this VD CSS constant

00:01:28.000 --> 00:01:33.120
and of course this ecmascript module has

00:01:30.279 --> 00:01:36.519
run and our Styles have been injected on

00:01:33.120 --> 00:01:38.840
the page as always within head element

00:01:36.519 --> 00:01:41.279
and if we'll take closer look at the

00:01:38.840 --> 00:01:44.159
Transformations that we has applied

00:01:41.279 --> 00:01:46.840
we'll see that our source sus file has

00:01:44.159 --> 00:01:49.760
been firstly converted to valid CSS

00:01:46.840 --> 00:01:52.679
syntax and then VD has transformed this

00:01:49.760 --> 00:01:55.600
code once again to convert it to valid

00:01:52.679 --> 00:01:58.039
ecmascript code which will inject CSS

00:01:55.600 --> 00:02:01.360
code on the page and by the way along

00:01:58.039 --> 00:02:04.639
with CSS preprocessors we can also use

00:02:01.360 --> 00:02:07.519
CSS modules at the same time and for

00:02:04.639 --> 00:02:10.440
this we need to use module word in file

00:02:07.519 --> 00:02:12.360
name let's rename this source file we

00:02:10.440 --> 00:02:14.880
have already seen how to work with CSS

00:02:12.360 --> 00:02:17.120
modules in one of the previous lessons

00:02:14.880 --> 00:02:19.360
so we're not going to spend too much

00:02:17.120 --> 00:02:21.960
time on this here let's just see what is

00:02:19.360 --> 00:02:24.320
going to happen when we import CSS

00:02:21.960 --> 00:02:26.919
module like this which also has

00:02:24.320 --> 00:02:29.080
pre-processor code and let's take a look

00:02:26.919 --> 00:02:31.320
what value we're going to get in this

00:02:29.080 --> 00:02:33.519
Styles variable by printing it in a

00:02:31.320 --> 00:02:35.080
console if we leave it as this in a

00:02:33.519 --> 00:02:38.279
console we're going to get an empty

00:02:35.080 --> 00:02:41.159
object so let's go back to SAS file and

00:02:38.279 --> 00:02:44.080
change this selector on class for

00:02:41.159 --> 00:02:45.880
example wrapper and there we go now this

00:02:44.080 --> 00:02:48.320
object contains one key which

00:02:45.880 --> 00:02:50.639
corresponds to class name and the value

00:02:48.320 --> 00:02:53.080
will be generated class name with random

00:02:50.639 --> 00:02:55.799
hash and of course CSS rule that

00:02:53.080 --> 00:02:58.600
corresponds to this unique class name

00:02:55.799 --> 00:03:00.399
has been injected within head element

00:02:58.600 --> 00:03:02.960
and now in our Javascript file we can

00:03:00.399 --> 00:03:05.559
use this class name in whatever way we'd

00:03:02.960 --> 00:03:09.240
like for example let's manually assign

00:03:05.559 --> 00:03:11.000
this class to the body element like so

00:03:09.240 --> 00:03:13.399
and of course in a browser we will see

00:03:11.000 --> 00:03:15.880
that this rule has been applied to our

00:03:13.399 --> 00:03:19.440
heading element and this is how easy it

00:03:15.880 --> 00:03:22.320
is to work with CSS preprocessors in vit

00:03:19.440 --> 00:03:24.799
projects vit allows us to work with Json

